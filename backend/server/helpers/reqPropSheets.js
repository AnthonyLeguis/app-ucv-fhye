export const getSheetColumns = () => {
    return [
        { header: 'Número de Planilla', key: 'sheetNumber', width: 15 },
        { header: 'Área', key: 'area', width: 20 },
        { header: 'Permiso de Impresión', key: 'printPermission', width: 20 },
        { header: 'IDAC', key: 'idac', width: 10 },
        { header: 'Tipo de Movimiento', key: 'movementType', width: 20 },
        { header: 'Ubicación', key: 'ubication', width: 20 },
        { header: 'Fecha de Introducción', key: 'introducedDate', width: 20 },
        { header: 'Fecha de Envío', key: 'sentDate', width: 20 },
        { header: 'Fecha de Recepción por Presupuesto', key: 'receivedByBudgetDate', width: 20 },
        { header: 'Fecha de Aceptación por Presupuesto', key: 'acceptedByBudgetDate', width: 20 },
        { header: 'Fecha de Recepción por RRHH', key: 'receivedByHRDate', width: 20 },
        { header: 'Fecha de Aceptación por RRHH', key: 'acceptedByHRDate', width: 20 },
        { header: 'Fecha de Recepción por Nómina', key: 'receivedByPayrollDate', width: 20 },
        { header: 'Fecha de Aceptación por Nómina', key: 'acceptedByPayrollDate', width: 20 },
        { header: 'Observaciones Generales', key: 'observations_general', width: 30 },
        { header: 'Nominilla', key: 'payrollNominee', width: 20 },
        { header: 'Facultad o Dependencia', key: 'facultyOrDependency', width: 20 },
        { header: 'Fecha de Ingreso', key: 'entryDate', width: 15 },
        { header: 'Fecha Efectiva', key: 'effectiveDate', width: 15 },
        { header: 'Fecha de Fin de Contrato', key: 'contractEndDate', width: 15 },
        { header: 'Unidad Ejecutora', key: 'executingUnit', width: 15 },
        { header: 'Dedicación', key: 'dedication', width: 15 },
        { header: 'Categoría Docente', key: 'teachingCategory', width: 15 },
        { header: 'Cargo', key: 'position', width: 20 },
        { header: 'Cargo Actual', key: 'currentPosition', width: 20 },
        { header: 'Grado', key: 'grade', width: 10 },
        { header: 'Tabla OPSU', key: 'opsuTable', width: 15 },
        { header: 'Tipo de Personal', key: 'personnelType', width: 15 },
        { header: 'Jornada Laboral', key: 'workingDay', width: 15 },
        { header: 'Tipo de Contrato', key: 'typeContract', width: 15 },
        { header: 'Valor del Salario', key: 'valueSalary', width: 15 },
        { header: 'Salario Mensual', key: 'mounthlySalary', width: 15 },
        { header: 'Razón del Movimiento', key: 'ReasonForMovement', width: 20 },
        { header: 'Fecha de Reconocimiento', key: 'recognitionDate', width: 20 },
        { header: 'Diferencia de Compensación Salarial', key: 'salaryCompensationDiff', width: 20 },
        { header: 'Gastos de Representación', key: 'representationExpenses', width: 20 },
        { header: 'Tipo Prima A', key: 'typePrimaA', width: 15 },
        { header: 'Monto Prima A', key: 'amountPrimaA', width: 15 },
        { header: 'Tipo Prima B', key: 'typePrimaB', width: 15 },
        { header: 'Monto Prima B', key: 'amountPrimaB', width: 15 },
        { header: 'Prima Rango V', key: 'primaRangoV', width: 15 },
        { header: 'Otra Compensación', key: 'otherCompensation', width: 15 },
        { header: 'Código de Presupuesto', key: 'budgetCode', width: 20 },
        { header: 'Código Contable', key: 'accountingCode', width: 20 },
        { header: 'Observaciones', key: 'observations', width: 30 },
        // ... (Campos del empleado) ...
        { header: 'ID del Empleado', key: 'employeeId._id', width: 30 },
        { header: 'Área del Empleado', key: 'employeeId.area', width: 20 },
        { header: 'Nombres del Empleado', key: 'employeeId.names', width: 30 },
        { header: 'Apellidos del Empleado', key: 'employeeId.surnames', width: 30 },
        { header: 'Tipo de Cédula', key: 'employeeId.idType', width: 15 },
        { header: 'Cédula', key: 'employeeId.nationalId', width: 15 },
        { header: 'RIF', key: 'employeeId.rif', width: 15 },
        { header: 'Fecha de Nacimiento', key: 'employeeId.birthdate', width: 20 },
        { header: 'País de Nacimiento', key: 'employeeId.countryOfBirth', width: 20 },
        { header: 'Ciudad de Nacimiento', key: 'employeeId.cityOfBirth', width: 20 },
        { header: 'Estado Civil', key: 'employeeId.maritalStatus', width: 15 },
        { header: 'Género', key: 'employeeId.gender', width: 10 },
        { header: 'Cargas Familiares', key: 'employeeId.familyDependents', width: 15 },
        { header: 'Nivel de Educación', key: 'employeeId.educationLevel', width: 20 },
        { header: 'Correo Electrónico del Empleado', key: 'employeeId.email', width: 30 },
        { header: 'Número de Teléfono del Empleado', key: 'employeeId.phoneNumber', width: 20 },
        { header: 'Dirección del Empleado', key: 'employeeId.address', width: 30 },
        { header: 'Banco', key: 'employeeId.bank', width: 20 },
        { header: 'Cuenta de Nómina', key: 'employeeId.payrollAccount', width: 20 }
      ];
  };
  
export  const getSheetRowData = (sheet) => {
    return {
        sheetNumber: sheet.sheetNumber,
        area: sheet.area,
        printPermission: sheet.printPermission,
        idac: sheet.idac,
        movementType: sheet.movementType,
        ubication: sheet.ubication,
        introducedDate: sheet.introducedDate,
        sentDate: sheet.sentDate,
        receivedByBudgetDate: sheet.receivedByBudgetDate,
        acceptedByBudgetDate: sheet.acceptedByBudgetDate,
        receivedByHRDate: sheet.receivedByHRDate,
        acceptedByHRDate: sheet.acceptedByHRDate,
        receivedByPayrollDate: sheet.receivedByPayrollDate,
        acceptedByPayrollDate: sheet.acceptedByPayrollDate,
        observations_general: sheet.observations_general,
        payrollNominee: sheet.payrollNominee,
        facultyOrDependency: sheet.facultyOrDependency,
        entryDate: sheet.entryDate,
        effectiveDate: sheet.effectiveDate,
        contractEndDate: sheet.contractEndDate,
        executingUnit: sheet.executingUnit,
        dedication: sheet.dedication,
        teachingCategory: sheet.teachingCategory,
        position: sheet.position,
        currentPosition: sheet.currentPosition,
        grade: sheet.grade,
        opsuTable: sheet.opsuTable,
        personnelType: sheet.personnelType,
        workingDay: sheet.workingDay,
        typeContract: sheet.typeContract,
        valueSalary: sheet.valueSalary,
        mounthlySalary: sheet.mounthlySalary,
        ReasonForMovement: sheet.ReasonForMovement,
        recognitionDate: sheet.recognitionDate,
        salaryCompensationDiff: sheet.salaryCompensationDiff,
        representationExpenses: sheet.representationExpenses,
        typePrimaA: sheet.typePrimaA,
        amountPrimaA: sheet.amountPrimaA,
        typePrimaB: sheet.typePrimaB,
        amountPrimaB: sheet.amountPrimaB,
        primaRangoV: sheet.primaRangoV,
        otherCompensation: sheet.otherCompensation,
        budgetCode: sheet.budgetCode,
        accountingCode: sheet.accountingCode,   
        observations: sheet.observations,
        'employeeId._id': sheet.employeeId._id,
        'employeeId.area': sheet.employeeId.area,
        "employeeId.names": sheet.employeeId.names,
        "employeeId.surnames": sheet.employeeId.surnames,
        "employeeId.idType": sheet.employeeId.idType,
        "employeeId.nationalId": sheet.employeeId.nationalId,
        "employeeId.rif": sheet.employeeId.rif,
        "employeeId.birthdate": sheet.employeeId.birthdate,
        "employeeId.countryOfBirth": sheet.employeeId.countryOfBirth,
        "employeeId.cityOfBirth": sheet.employeeId.cityOfBirth,
        "employeeId.maritalStatus": sheet.employeeId.maritalStatus,
        "employeeId.gender": sheet.employeeId.gender,
        "employeeId.familyDependents": sheet.employeeId.familyDependents,
        "employeeId.educationLevel": sheet.employeeId.educationLevel,
        "employeeId.email": sheet.employeeId.email,
        "employeeId.phoneNumber": sheet.employeeId.phoneNumber,
        "employeeId.address": sheet.employeeId.address,
        "employeeId.bank": sheet.employeeId.bank,
        "employeeId.payrollAccount": sheet.employeeId.payrollAccount
    };
  };
  

export default {
    getSheetColumns,
    getSheetRowData
} 